annotations:
  nginx.ingress.kubernetes.io/configuration-snippet: |
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;



#openssl genrsa -out ca.key 2048
#openssl req -new -x509 -days 3650 -key ca.key -subj "/C=CN/ST=GD/L=GZ/O=SC, Inc./CN=SC GDP Dev Root CA G1" -out ca.crt




keytool -genkeypair -alias hms -keyalg RSA -keysize 2048 -validity 365 -keystore hms.jks -storepass changeit -dname "CN=hms-stg.sc.co, OU=IT, O=SC, L=GZ, S=GD, C=CN"
keytool -certreq -alias hms -keystore hms.jks -file hms.csr -storepass changeit
openssl x509 -req -in hms.csr -CA ../ca.crt -CAkey ../ca.key -CAcreateserial -out hms.crt -days 365 -extfile <(printf "subjectAltName=DNS.1:trino1.sc.co,IP.1:192.168.80.1")
openssl x509 -noout -text -in hms.crt 
keytool -import -trustcacerts -alias rootca -file ../ca.crt -keystore hms.jks  -storepass changeit  -noprompt
keytool -import -alias hms -file hms.crt   -keystore hms.jks -storepass changeit  -noprompt
keytool -list -v -keystore hms.jks  -storepass changeit 

keytool -genkeypair -alias dummy -keyalg RSA -keystore truststore.jks -storepass changeit -dname "CN=Dummy" -validity 1
keytool -delete -alias dummy -keystore truststore.jks -storepass changeit
keytool -import -trustcacerts -alias rootca -file ../ca.crt -keystore truststore.jks  -storepass changeit  -noprompt



from airflow.contrib.auth.backends.oauth_auth import AirflowSecurityManager

class AzureOAuthSecurityManager(AirflowSecurityManager):
    def get_oauth_user_info(self, provider, resp):
        if provider == "azure":
            # 获取用户组信息
            graph_data = requests.get(
                "https://graph.microsoft.com/v1.0/me/memberOf",
                headers={"Authorization": f"Bearer {resp['access_token']}"},
                params={"$select": "id,displayName"}
            ).json()
            
            return {
                "username": resp.get("preferred_username"),
                "email": resp.get("email"),
                "role": self.map_azure_group_to_role(graph_data)
            }

    def map_azure_group_to_role(self, groups_data):
        # 硬编码映射（生产环境建议配置化）
        group_mapping = {
            "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX": "Admin",  # 使用组ID更安全
            "airflow-data-team": "DataEngineer"
        }
        
        for group in groups_data.get('value', []):
            if group['id'] in group_mapping:
                return group_mapping[group['id']]
        return "Viewer"  # 安全默认值




pip install "apache-airflow[celery]==2.10.5" \
--constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.10.5/constraints-3.9.txt"

pip install psycopg2 connexion[swagger-ui]
pip install flask_cors
pip install apache-airflow-providers-postgres
pip install apache-airflow-providers-apache-hive
pip install apache-airflow-providers-apache-spark
pip install trino
pip install pyspark
pip install pyhive
pip install thrift
pip install pyarrow
pip install fastavro
pip install pandas

airflow db init
airflow users create -r Admin -u admin -e admin@example.com -f admin -l admin -p admin

pg_ctl -D /Users/simon/pg_data_build_from_src -l logfile start
psql -d postgres

airflow webserver --port 8080
airflow scheduler
airflow standalone

airflow users create \
    --username admin \
    --firstname FIRSTNAME \
    --lastname LASTNAME \
    --role Admin \
    --email admin@example.com


npx @svgr/cli --typescript src/assets/icons/trino-logo-w-bk.svg --out-dir src/components/icons

npx @svgr/cli --typescript src/assets/icons/xcodeflow.svg --out-dir src/components/icons
